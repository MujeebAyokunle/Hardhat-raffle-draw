{
  "address": "0x0fad073Bd8dB21650Cc6E438cdE70b3724e2EAeb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_FAILEDTRANSFER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRanomNumber",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnderAddress",
          "type": "address"
        }
      ],
      "name": "WinnderPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf16c31d5033c13b05150e5ff8ebf4e20534ddc8179d17bd958cbbc771344931e",
  "receipt": {
    "to": null,
    "from": "0xE8Ba3f7a81cDf07d4F92E4dE61FAB362ab7Aa778",
    "contractAddress": "0x0fad073Bd8dB21650Cc6E438cdE70b3724e2EAeb",
    "transactionIndex": 0,
    "gasUsed": "1167679",
    "logsBloom": "0x
    "blockHash": "0x1b7eb56b1555fd133cdbeecaec4b5198110b76e66b653f1a656d6601650132d9",
    "transactionHash": "0xf16c31d5033c13b05150e5ff8ebf4e20534ddc8179d17bd958cbbc771344931e",
    "logs": [],
    "blockNumber": 91,
    "cumulativeGasUsed": "1167679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE8Ba3f7a81cDf07d4F92E4dE61FAB362ab7Aa778",
    "500000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "0",
    "30",
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "d6bb901b6bf1064142752278a6b6a32a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_FAILEDTRANSFER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRanomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnderAddress\",\"type\":\"address\"}],\"name\":\"WinnderPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alabi Mujeeb\",\"details\":\"Makes use of chainlink VRF and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Raffle smart contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for an untamperable raffle smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rafle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Rafle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nerror Raffle_NotEnoughETHEntered();\\nerror Raffle_FAILEDTRANSFER();\\nerror Raffle_NotOpen();\\nerror Raffle_UpkeepNotNeeded(uint256 balance, uint256 players, uint256 state);\\n\\n/**\\n * @title Raffle smart contract\\n * @author Alabi Mujeeb\\n * @notice This contract is for an untamperable raffle smart contract\\n * @dev Makes use of chainlink VRF and chainlink keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum RaffleState {\\n        Close,\\n        Open\\n    }\\n\\n    uint256 private immutable i_entranceFee;\\n    address[] private s_players;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastBlockTime;\\n    uint256 immutable i_interval;\\n\\n    // Events\\n    event RaffleEntered(address indexed player);\\n    event RequestedRanomNumber(uint256 indexed requestId);\\n    event WinnderPicked(address indexed winnderAddress);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint32 callbackGasLimit,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint256 interval,\\n        uint256 entranceFee\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_raffleState = RaffleState.Open;\\n        s_lastBlockTime = block.timestamp;\\n        i_keyHash = gasLane;\\n        i_interval = interval;\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isAboveInterval = (block.timestamp - s_lastBlockTime) > i_interval;\\n        bool isOpen = s_raffleState == RaffleState.Open;\\n        bool players_present = s_players.length > 0;\\n        bool has_balance = address(this).balance > 0;\\n        upkeepNeeded =\\n            isOpen &&\\n            isAboveInterval &&\\n            players_present &&\\n            has_balance;\\n\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes memory /* performData */) public override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle_UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        // Will revert if subscription is not set and funded.\\n        s_raffleState = RaffleState.Close;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedRanomNumber(requestId);\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle_NotEnoughETHEntered();\\n        }\\n\\n        if (s_raffleState != RaffleState.Open) {\\n            revert Raffle_NotOpen();\\n        }\\n\\n        s_players.push(msg.sender);\\n        emit RaffleEntered(msg.sender);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnderIndex = randomWords[0] % s_players.length;\\n        address winnderAddress = s_players[winnderIndex];\\n\\n        s_raffleState = RaffleState.Open;\\n        s_players = new address[](0);\\n        s_lastBlockTime = block.timestamp;\\n        (bool success, ) = payable(winnderAddress).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle_FAILEDTRANSFER();\\n        }\\n\\n        emit WinnderPicked(winnderAddress);\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastBlockTime;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x45e4b1610cc2fd9f9072310ca5f407fd6bbccd73de555d97f38e5043ed3dbd8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001717380380620017178339818101604052810190620000389190620001ac565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508463ffffffff166101008163ffffffff1660e01b815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508060a0818152505060018060006101000a81548160ff0219169083600181111562000110576200010f620002b4565b5b0217905550426002819055508360c081815250508161014081815250505050505050506200036a565b6000815190506200014a81620002e8565b92915050565b600081519050620001618162000302565b92915050565b60008151905062000178816200031c565b92915050565b6000815190506200018f8162000336565b92915050565b600081519050620001a68162000350565b92915050565b60008060008060008060c08789031215620001cc57620001cb620002e3565b5b6000620001dc89828a0162000139565b9650506020620001ef89828a016200017e565b95505060406200020289828a0162000150565b94505060606200021589828a0162000195565b93505060806200022889828a0162000167565b92505060a06200023b89828a0162000167565b9150509295509295509295565b6000620002558262000266565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f38162000248565b8114620002ff57600080fd5b50565b6200030d816200025c565b81146200031957600080fd5b50565b620003278162000286565b81146200033357600080fd5b50565b620003418162000290565b81146200034d57600080fd5b50565b6200035b81620002a0565b81146200036757600080fd5b50565b60805160601c60a05160c05160e05160c01c6101005160e01c6101205160601c61014051611331620003e6600039600081816107560152610839015260006105df0152600061065f0152600061063c0152600061061b0152600081816102b401526103b10152600081816102f1015261034501526113316000f3fe6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a14610189578063565429de146101b45780635f1b0fd8146101df5780636e04ff0d1461020a57806391ad27b414610248578063e55ae4e814610273576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610f3c565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610f21565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610d15565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051d565b6040516101579190610f3c565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610c72565b610527565b005b34801561019557600080fd5b5061019e610726565b6040516101ab9190610f3c565b60405180910390f35b3480156101c057600080fd5b506101c9610735565b6040516101d69190610f3c565b60405180910390f35b3480156101eb57600080fd5b506101f4610741565b6040516102019190610f3c565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610c72565b61074e565b60405161023f929190610e9e565b60405180910390f35b34801561025457600080fd5b5061025d610835565b60405161026a9190610f3c565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190610cbb565b61085d565b6040516102a79190610e5a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190610e75565b60405180910390fd5b6103ab82826108a4565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018081111561041c5761041b611216565b5b600160009054906101000a900460ff16600181111561043e5761043d611216565b5b14610475576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b6000600254905090565b60006105416040518060200160405280600081525061074e565b509050806105b05747600080549050600160009054906101000a900460ff16600181111561057257610571611216565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016105a793929190610f57565b60405180910390fd5b6000600160006101000a81548160ff021916908360018111156105d6576105d5611216565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a0959493929190610ece565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610ce8565b9050807f1d75bcce979ae80fcba82ef5be0722b9cce256ee9721c8d9f19f85458361d2c160405160405180910390a2505050565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600254426107839190611037565b119050600060018081111561079b5761079a611216565b5b600160009054906101000a900460ff1660018111156107bd576107bc611216565b5b149050600080600080549050119050600080471190508280156107dd5750835b80156107e65750815b80156107ef5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061087257610871611245565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108bf576108be611245565b5b60200260200101516108d19190611187565b905060008082815481106108e8576108e7611245565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060018060006101000a81548160ff0219169083600181111561093a57610939611216565b5b0217905550600067ffffffffffffffff81111561095a57610959611274565b5b6040519080825280602002602001820160405280156109885781602001602082028036833780820191505090505b506000908051906020019061099e929190610a93565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109cc90610e45565b60006040518083038185875af1925050503d8060008114610a09576040519150601f19603f3d011682016040523d82523d6000602084013e610a0e565b606091505b5050905080610a49576040517ffc3b1bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f631c1199c7234f18cefb0d0be51a3d942fe2a05d99c794c818c4f273a9e6a6e960405160405180910390a25050505050565b828054828255906000526020600020908101928215610b0c579160200282015b82811115610b0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab3565b5b509050610b199190610b1d565b5090565b5b80821115610b36576000816000905550600101610b1e565b5090565b6000610b4d610b4884610fb3565b610f8e565b90508083825260208201905082856020860282011115610b7057610b6f6112a8565b5b60005b85811015610ba05781610b868882610c48565b845260208401935060208301925050600181019050610b73565b5050509392505050565b6000610bbd610bb884610fdf565b610f8e565b905082815260208101848484011115610bd957610bd86112ad565b5b610be4848285611114565b509392505050565b600082601f830112610c0157610c006112a3565b5b8135610c11848260208601610b3a565b91505092915050565b600082601f830112610c2f57610c2e6112a3565b5b8135610c3f848260208601610baa565b91505092915050565b600081359050610c57816112e4565b92915050565b600081519050610c6c816112e4565b92915050565b600060208284031215610c8857610c876112b7565b5b600082013567ffffffffffffffff811115610ca657610ca56112b2565b5b610cb284828501610c1a565b91505092915050565b600060208284031215610cd157610cd06112b7565b5b6000610cdf84828501610c48565b91505092915050565b600060208284031215610cfe57610cfd6112b7565b5b6000610d0c84828501610c5d565b91505092915050565b60008060408385031215610d2c57610d2b6112b7565b5b6000610d3a85828601610c48565b925050602083013567ffffffffffffffff811115610d5b57610d5a6112b2565b5b610d6785828601610bec565b9150509250929050565b610d7a8161106b565b82525050565b610d898161107d565b82525050565b610d9881611089565b82525050565b6000610da982611010565b610db3818561101b565b9350610dc3818560208601611123565b610dcc816112bc565b840191505092915050565b610de081611102565b82525050565b6000610df360008361102c565b9150610dfe826112cd565b600082019050919050565b610e12816110a6565b82525050565b610e21816110d4565b82525050565b610e30816110de565b82525050565b610e3f816110ee565b82525050565b6000610e5082610de6565b9150819050919050565b6000602082019050610e6f6000830184610d71565b92915050565b6000604082019050610e8a6000830185610d71565b610e976020830184610d71565b9392505050565b6000604082019050610eb36000830185610d80565b8181036020830152610ec58184610d9e565b90509392505050565b600060a082019050610ee36000830188610d8f565b610ef06020830187610e36565b610efd6040830186610e09565b610f0a6060830185610e27565b610f176080830184610e27565b9695505050505050565b6000602082019050610f366000830184610dd7565b92915050565b6000602082019050610f516000830184610e18565b92915050565b6000606082019050610f6c6000830186610e18565b610f796020830185610e18565b610f866040830184610e18565b949350505050565b6000610f98610fa9565b9050610fa48282611156565b919050565b6000604051905090565b600067ffffffffffffffff821115610fce57610fcd611274565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610ffa57610ff9611274565b5b611003826112bc565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611042826110d4565b915061104d836110d4565b9250828210156110605761105f6111b8565b5b828203905092915050565b6000611076826110b4565b9050919050565b60008115159050919050565b6000819050919050565b60008190506110a1826112d0565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061110d82611093565b9050919050565b82818337600083830152505050565b60005b83811015611141578082015181840152602081019050611126565b83811115611150576000848401525b50505050565b61115f826112bc565b810181811067ffffffffffffffff8211171561117e5761117d611274565b5b80604052505050565b6000611192826110d4565b915061119d836110d4565b9250826111ad576111ac6111e7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112e1576112e0611216565b5b50565b6112ed816110d4565b81146112f857600080fd5b5056fea264697066735822122063a175d4b545a28710bb156a9eccb13d52c2483b339d0eb02d8a624745ecafa164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a14610189578063565429de146101b45780635f1b0fd8146101df5780636e04ff0d1461020a57806391ad27b414610248578063e55ae4e814610273576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610f3c565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610f21565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610d15565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051d565b6040516101579190610f3c565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610c72565b610527565b005b34801561019557600080fd5b5061019e610726565b6040516101ab9190610f3c565b60405180910390f35b3480156101c057600080fd5b506101c9610735565b6040516101d69190610f3c565b60405180910390f35b3480156101eb57600080fd5b506101f4610741565b6040516102019190610f3c565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190610c72565b61074e565b60405161023f929190610e9e565b60405180910390f35b34801561025457600080fd5b5061025d610835565b60405161026a9190610f3c565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190610cbb565b61085d565b6040516102a79190610e5a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190610e75565b60405180910390fd5b6103ab82826108a4565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018081111561041c5761041b611216565b5b600160009054906101000a900460ff16600181111561043e5761043d611216565b5b14610475576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f634f3211e3a4e43fee5a21ad9f87ca153b300fc78b1c557a2057dbe9c63bcb4760405160405180910390a2565b6000600254905090565b60006105416040518060200160405280600081525061074e565b509050806105b05747600080549050600160009054906101000a900460ff16600181111561057257610571611216565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016105a793929190610f57565b60405180910390fd5b6000600160006101000a81548160ff021916908360018111156105d6576105d5611216565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a0959493929190610ece565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610ce8565b9050807f1d75bcce979ae80fcba82ef5be0722b9cce256ee9721c8d9f19f85458361d2c160405160405180910390a2505050565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600254426107839190611037565b119050600060018081111561079b5761079a611216565b5b600160009054906101000a900460ff1660018111156107bd576107bc611216565b5b149050600080600080549050119050600080471190508280156107dd5750835b80156107e65750815b80156107ef5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061087257610871611245565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108bf576108be611245565b5b60200260200101516108d19190611187565b905060008082815481106108e8576108e7611245565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060018060006101000a81548160ff0219169083600181111561093a57610939611216565b5b0217905550600067ffffffffffffffff81111561095a57610959611274565b5b6040519080825280602002602001820160405280156109885781602001602082028036833780820191505090505b506000908051906020019061099e929190610a93565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109cc90610e45565b60006040518083038185875af1925050503d8060008114610a09576040519150601f19603f3d011682016040523d82523d6000602084013e610a0e565b606091505b5050905080610a49576040517ffc3b1bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f631c1199c7234f18cefb0d0be51a3d942fe2a05d99c794c818c4f273a9e6a6e960405160405180910390a25050505050565b828054828255906000526020600020908101928215610b0c579160200282015b82811115610b0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab3565b5b509050610b199190610b1d565b5090565b5b80821115610b36576000816000905550600101610b1e565b5090565b6000610b4d610b4884610fb3565b610f8e565b90508083825260208201905082856020860282011115610b7057610b6f6112a8565b5b60005b85811015610ba05781610b868882610c48565b845260208401935060208301925050600181019050610b73565b5050509392505050565b6000610bbd610bb884610fdf565b610f8e565b905082815260208101848484011115610bd957610bd86112ad565b5b610be4848285611114565b509392505050565b600082601f830112610c0157610c006112a3565b5b8135610c11848260208601610b3a565b91505092915050565b600082601f830112610c2f57610c2e6112a3565b5b8135610c3f848260208601610baa565b91505092915050565b600081359050610c57816112e4565b92915050565b600081519050610c6c816112e4565b92915050565b600060208284031215610c8857610c876112b7565b5b600082013567ffffffffffffffff811115610ca657610ca56112b2565b5b610cb284828501610c1a565b91505092915050565b600060208284031215610cd157610cd06112b7565b5b6000610cdf84828501610c48565b91505092915050565b600060208284031215610cfe57610cfd6112b7565b5b6000610d0c84828501610c5d565b91505092915050565b60008060408385031215610d2c57610d2b6112b7565b5b6000610d3a85828601610c48565b925050602083013567ffffffffffffffff811115610d5b57610d5a6112b2565b5b610d6785828601610bec565b9150509250929050565b610d7a8161106b565b82525050565b610d898161107d565b82525050565b610d9881611089565b82525050565b6000610da982611010565b610db3818561101b565b9350610dc3818560208601611123565b610dcc816112bc565b840191505092915050565b610de081611102565b82525050565b6000610df360008361102c565b9150610dfe826112cd565b600082019050919050565b610e12816110a6565b82525050565b610e21816110d4565b82525050565b610e30816110de565b82525050565b610e3f816110ee565b82525050565b6000610e5082610de6565b9150819050919050565b6000602082019050610e6f6000830184610d71565b92915050565b6000604082019050610e8a6000830185610d71565b610e976020830184610d71565b9392505050565b6000604082019050610eb36000830185610d80565b8181036020830152610ec58184610d9e565b90509392505050565b600060a082019050610ee36000830188610d8f565b610ef06020830187610e36565b610efd6040830186610e09565b610f0a6060830185610e27565b610f176080830184610e27565b9695505050505050565b6000602082019050610f366000830184610dd7565b92915050565b6000602082019050610f516000830184610e18565b92915050565b6000606082019050610f6c6000830186610e18565b610f796020830185610e18565b610f866040830184610e18565b949350505050565b6000610f98610fa9565b9050610fa48282611156565b919050565b6000604051905090565b600067ffffffffffffffff821115610fce57610fcd611274565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610ffa57610ff9611274565b5b611003826112bc565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611042826110d4565b915061104d836110d4565b9250828210156110605761105f6111b8565b5b828203905092915050565b6000611076826110b4565b9050919050565b60008115159050919050565b6000819050919050565b60008190506110a1826112d0565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061110d82611093565b9050919050565b82818337600083830152505050565b60005b83811015611141578082015181840152602081019050611126565b83811115611150576000848401525b50505050565b61115f826112bc565b810181811067ffffffffffffffff8211171561117e5761117d611274565b5b80604052505050565b6000611192826110d4565b915061119d836110d4565b9250826111ad576111ac6111e7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106112e1576112e0611216565b5b50565b6112ed816110d4565b81146112f857600080fd5b5056fea264697066735822122063a175d4b545a28710bb156a9eccb13d52c2483b339d0eb02d8a624745ecafa164736f6c63430008070033",
  "devdoc": {
    "author": "Alabi Mujeeb",
    "details": "Makes use of chainlink VRF and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "Raffle smart contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for an untamperable raffle smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1386,
        "contract": "contracts/Rafle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1404,
        "contract": "contracts/Rafle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(RaffleState)1381"
      },
      {
        "astId": 1406,
        "contract": "contracts/Rafle.sol:Raffle",
        "label": "s_lastBlockTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1381": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}